# Autogenerated from a Treetop grammar. Edits may be lost.



module Acute::Rules
  module Dates
    include Treetop::Runtime

    def root
      @root ||= :precise_date
    end

    module PreciseDate0
      def repeating_date_node
        elements[0]
      end

      def date_year_separator
        elements[1]
      end

      def year_node
        elements[2]
      end
    end

    def _nt_precise_date
      start_index = index
      if node_cache[:precise_date].has_key?(index)
        cached = node_cache[:precise_date][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_precise_repeating_date
      s0 << r1
      if r1
        r2 = _nt_date_year_separator
        s0 << r2
        if r2
          r3 = _nt_precise_year
          s0 << r3
        end
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::DateNode,input, i0...index, s0)
        r0.extend(PreciseDate0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:precise_date][start_index] = r0

      r0
    end

    def _nt_precise_repeating_date
      start_index = index
      if node_cache[:precise_repeating_date].has_key?(index)
        cached = node_cache[:precise_repeating_date][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_precise_repeating_date_long_month
      if r1
        r0 = r1
      else
        r2 = _nt_precise_repeating_date_short_month
        if r2
          r0 = r2
        else
          r3 = _nt_precise_repeating_date_february
          if r3
            r0 = r3
          else
            @index = i0
            r0 = nil
          end
        end
      end

      node_cache[:precise_repeating_date][start_index] = r0

      r0
    end

    module PreciseRepeatingDateLongMonth0
      def month_node
        elements[0]
      end

      def month_day_separator
        elements[1]
      end

      def day_number_node
        elements[2]
      end
    end

    def _nt_precise_repeating_date_long_month
      start_index = index
      if node_cache[:precise_repeating_date_long_month].has_key?(index)
        cached = node_cache[:precise_repeating_date_long_month][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_calendar_long_month
      s0 << r1
      if r1
        r2 = _nt_month_day_separator
        s0 << r2
        if r2
          r3 = _nt_precise_day_of_long_month
          s0 << r3
        end
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::RepeatingDateNode,input, i0...index, s0)
        r0.extend(PreciseRepeatingDateLongMonth0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:precise_repeating_date_long_month][start_index] = r0

      r0
    end

    module PreciseRepeatingDateShortMonth0
      def month_node
        elements[0]
      end

      def month_day_separator
        elements[1]
      end

      def day_number_node
        elements[2]
      end
    end

    def _nt_precise_repeating_date_short_month
      start_index = index
      if node_cache[:precise_repeating_date_short_month].has_key?(index)
        cached = node_cache[:precise_repeating_date_short_month][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_calendar_short_month
      s0 << r1
      if r1
        r2 = _nt_month_day_separator
        s0 << r2
        if r2
          r3 = _nt_precise_day_of_short_month
          s0 << r3
        end
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::RepeatingDateNode,input, i0...index, s0)
        r0.extend(PreciseRepeatingDateShortMonth0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:precise_repeating_date_short_month][start_index] = r0

      r0
    end

    module PreciseRepeatingDateFebruary0
      def month_node
        elements[0]
      end

      def month_day_separator
        elements[1]
      end

      def day_number_node
        elements[2]
      end
    end

    def _nt_precise_repeating_date_february
      start_index = index
      if node_cache[:precise_repeating_date_february].has_key?(index)
        cached = node_cache[:precise_repeating_date_february][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_calendar_short_month
      s0 << r1
      if r1
        r2 = _nt_month_day_separator
        s0 << r2
        if r2
          r3 = _nt_precise_day_of_short_month
          s0 << r3
        end
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::RepeatingDateNode,input, i0...index, s0)
        r0.extend(PreciseRepeatingDateFebruary0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:precise_repeating_date_february][start_index] = r0

      r0
    end

    def _nt_precise_day_of_long_month
      start_index = index
      if node_cache[:precise_day_of_long_month].has_key?(index)
        cached = node_cache[:precise_day_of_long_month][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_day_ordinal_of_long_month
      if r1
        r0 = r1
      else
        r2 = _nt_day_number_of_long_month
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:precise_day_of_long_month][start_index] = r0

      r0
    end

    def _nt_precise_day_of_short_month
      start_index = index
      if node_cache[:precise_day_of_short_month].has_key?(index)
        cached = node_cache[:precise_day_of_short_month][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_day_ordinal_of_short_month
      if r1
        r0 = r1
      else
        r2 = _nt_day_number_of_short_month
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:precise_day_of_short_month][start_index] = r0

      r0
    end

    def _nt_precise_day_of_february
      start_index = index
      if node_cache[:precise_day_of_february].has_key?(index)
        cached = node_cache[:precise_day_of_february][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_day_ordinal_of_february
      if r1
        r0 = r1
      else
        r2 = _nt_day_number_of_february
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:precise_day_of_february][start_index] = r0

      r0
    end

    def _nt_day_ordinal_of_long_month
      start_index = index
      if node_cache[:day_ordinal_of_long_month].has_key?(index)
        cached = node_cache[:day_ordinal_of_long_month][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_day_ordinal_long_thirties
      if r1
        r0 = r1
      else
        r2 = _nt_day_ordinal_tens_and_twenties
        if r2
          r0 = r2
        else
          r3 = _nt_day_ordinal_oughts
          if r3
            r0 = r3
          else
            @index = i0
            r0 = nil
          end
        end
      end

      node_cache[:day_ordinal_of_long_month][start_index] = r0

      r0
    end

    module DayNumberOfLongMonth0
    end

    module DayNumberOfLongMonth1
    end

    module DayNumberOfLongMonth2
    end

    module DayNumberOfLongMonth3
    end

    def _nt_day_number_of_long_month
      start_index = index
      if node_cache[:day_number_of_long_month].has_key?(index)
        cached = node_cache[:day_number_of_long_month][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      i1 = index
      i2, s2 = index, []
      if has_terminal?("3", false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("3")
        r3 = nil
      end
      s2 << r3
      if r3
        if has_terminal?('\G[01]', true, index)
          r4 = true
          @index += 1
        else
          r4 = nil
        end
        s2 << r4
      end
      if s2.last
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        r2.extend(DayNumberOfLongMonth0)
      else
        @index = i2
        r2 = nil
      end
      if r2
        r1 = r2
      else
        i5, s5 = index, []
        if has_terminal?('\G[21]', true, index)
          r6 = true
          @index += 1
        else
          r6 = nil
        end
        s5 << r6
        if r6
          if has_terminal?('\G[0-9]', true, index)
            r7 = true
            @index += 1
          else
            r7 = nil
          end
          s5 << r7
        end
        if s5.last
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          r5.extend(DayNumberOfLongMonth1)
        else
          @index = i5
          r5 = nil
        end
        if r5
          r1 = r5
        else
          i8, s8 = index, []
          if has_terminal?("0", false, index)
            r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("0")
            r10 = nil
          end
          if r10
            r9 = r10
          else
            r9 = instantiate_node(SyntaxNode,input, index...index)
          end
          s8 << r9
          if r9
            if has_terminal?('\G[1-9]', true, index)
              r11 = true
              @index += 1
            else
              r11 = nil
            end
            s8 << r11
          end
          if s8.last
            r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
            r8.extend(DayNumberOfLongMonth2)
          else
            @index = i8
            r8 = nil
          end
          if r8
            r1 = r8
          else
            @index = i1
            r1 = nil
          end
        end
      end
      s0 << r1
      if r1
        i12 = index
        if has_terminal?('\G[0-9]', true, index)
          r13 = true
          @index += 1
        else
          r13 = nil
        end
        if r13
          r12 = nil
        else
          @index = i12
          r12 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r12
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::MonthDayNumberNode,input, i0...index, s0)
        r0.extend(DayNumberOfLongMonth3)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:day_number_of_long_month][start_index] = r0

      r0
    end

    def _nt_day_ordinal_of_short_month
      start_index = index
      if node_cache[:day_ordinal_of_short_month].has_key?(index)
        cached = node_cache[:day_ordinal_of_short_month][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_day_ordinal_thirty
      if r1
        r0 = r1
      else
        r2 = _nt_day_ordinal_tens_and_twenties
        if r2
          r0 = r2
        else
          r3 = _nt_day_ordinal_oughts
          if r3
            r0 = r3
          else
            @index = i0
            r0 = nil
          end
        end
      end

      node_cache[:day_ordinal_of_short_month][start_index] = r0

      r0
    end

    module DayNumberOfShortMonth0
    end

    module DayNumberOfShortMonth1
    end

    module DayNumberOfShortMonth2
    end

    def _nt_day_number_of_short_month
      start_index = index
      if node_cache[:day_number_of_short_month].has_key?(index)
        cached = node_cache[:day_number_of_short_month][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      i1 = index
      if has_terminal?("30", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure("30")
        r2 = nil
      end
      if r2
        r1 = r2
      else
        i3, s3 = index, []
        if has_terminal?('\G[21]', true, index)
          r4 = true
          @index += 1
        else
          r4 = nil
        end
        s3 << r4
        if r4
          if has_terminal?('\G[0-9]', true, index)
            r5 = true
            @index += 1
          else
            r5 = nil
          end
          s3 << r5
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(DayNumberOfShortMonth0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          r1 = r3
        else
          i6, s6 = index, []
          if has_terminal?("0", false, index)
            r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("0")
            r8 = nil
          end
          if r8
            r7 = r8
          else
            r7 = instantiate_node(SyntaxNode,input, index...index)
          end
          s6 << r7
          if r7
            if has_terminal?('\G[1-9]', true, index)
              r9 = true
              @index += 1
            else
              r9 = nil
            end
            s6 << r9
          end
          if s6.last
            r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
            r6.extend(DayNumberOfShortMonth1)
          else
            @index = i6
            r6 = nil
          end
          if r6
            r1 = r6
          else
            @index = i1
            r1 = nil
          end
        end
      end
      s0 << r1
      if r1
        i10 = index
        if has_terminal?('\G[0-9]', true, index)
          r11 = true
          @index += 1
        else
          r11 = nil
        end
        if r11
          r10 = nil
        else
          @index = i10
          r10 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r10
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::MonthDayNumberNode,input, i0...index, s0)
        r0.extend(DayNumberOfShortMonth2)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:day_number_of_short_month][start_index] = r0

      r0
    end

    def _nt_day_ordinal_of_february
      start_index = index
      if node_cache[:day_ordinal_of_february].has_key?(index)
        cached = node_cache[:day_ordinal_of_february][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_day_ordinal_tens_and_twenties
      if r1
        r0 = r1
      else
        r2 = _nt_day_ordinal_oughts
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:day_ordinal_of_february][start_index] = r0

      r0
    end

    module DayNumberOfFebruary0
    end

    module DayNumberOfFebruary1
    end

    module DayNumberOfFebruary2
    end

    def _nt_day_number_of_february
      start_index = index
      if node_cache[:day_number_of_february].has_key?(index)
        cached = node_cache[:day_number_of_february][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      i1 = index
      i2, s2 = index, []
      if has_terminal?('\G[21]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      s2 << r3
      if r3
        if has_terminal?('\G[0-9]', true, index)
          r4 = true
          @index += 1
        else
          r4 = nil
        end
        s2 << r4
      end
      if s2.last
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        r2.extend(DayNumberOfFebruary0)
      else
        @index = i2
        r2 = nil
      end
      if r2
        r1 = r2
      else
        i5, s5 = index, []
        if has_terminal?("0", false, index)
          r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("0")
          r7 = nil
        end
        if r7
          r6 = r7
        else
          r6 = instantiate_node(SyntaxNode,input, index...index)
        end
        s5 << r6
        if r6
          if has_terminal?('\G[1-9]', true, index)
            r8 = true
            @index += 1
          else
            r8 = nil
          end
          s5 << r8
        end
        if s5.last
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          r5.extend(DayNumberOfFebruary1)
        else
          @index = i5
          r5 = nil
        end
        if r5
          r1 = r5
        else
          @index = i1
          r1 = nil
        end
      end
      s0 << r1
      if r1
        i9 = index
        if has_terminal?('\G[0-9]', true, index)
          r10 = true
          @index += 1
        else
          r10 = nil
        end
        if r10
          r9 = nil
        else
          @index = i9
          r9 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r9
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::MonthDayNumberNode,input, i0...index, s0)
        r0.extend(DayNumberOfFebruary2)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:day_number_of_february][start_index] = r0

      r0
    end

    module DayOrdinalLongThirties0
    end

    def _nt_day_ordinal_long_thirties
      start_index = index
      if node_cache[:day_ordinal_long_thirties].has_key?(index)
        cached = node_cache[:day_ordinal_long_thirties][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?("3", false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("3")
        r1 = nil
      end
      s0 << r1
      if r1
        i2 = index
        r3 = _nt_ordinal_0
        if r3
          r2 = r3
        else
          r4 = _nt_ordinal_1
          if r4
            r2 = r4
          else
            @index = i2
            r2 = nil
          end
        end
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::MonthDayNumberNode,input, i0...index, s0)
        r0.extend(DayOrdinalLongThirties0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:day_ordinal_long_thirties][start_index] = r0

      r0
    end

    module DayOrdinalThirty0
      def ordinal_0
        elements[1]
      end
    end

    def _nt_day_ordinal_thirty
      start_index = index
      if node_cache[:day_ordinal_thirty].has_key?(index)
        cached = node_cache[:day_ordinal_thirty][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?("3", false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("3")
        r1 = nil
      end
      s0 << r1
      if r1
        r2 = _nt_ordinal_0
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(DayOrdinalThirty0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:day_ordinal_thirty][start_index] = r0

      r0
    end

    module DayOrdinalTensAndTwenties0
      def ordinal_0_to_9
        elements[1]
      end
    end

    def _nt_day_ordinal_tens_and_twenties
      start_index = index
      if node_cache[:day_ordinal_tens_and_twenties].has_key?(index)
        cached = node_cache[:day_ordinal_tens_and_twenties][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('\G[21]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      s0 << r1
      if r1
        r2 = _nt_ordinal_0_to_9
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(DayOrdinalTensAndTwenties0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:day_ordinal_tens_and_twenties][start_index] = r0

      r0
    end

    module DayOrdinalOughts0
      def ordinal_1_to_9
        elements[0]
      end

    end

    def _nt_day_ordinal_oughts
      start_index = index
      if node_cache[:day_ordinal_oughts].has_key?(index)
        cached = node_cache[:day_ordinal_oughts][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_ordinal_1_to_9
      s0 << r1
      if r1
        if has_terminal?('', false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 0))
          @index += 0
        else
          terminal_parse_failure('')
          r2 = nil
        end
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::MonthDayNumberNode,input, i0...index, s0)
        r0.extend(DayOrdinalOughts0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:day_ordinal_oughts][start_index] = r0

      r0
    end

    def _nt_ordinal_0_to_9
      start_index = index
      if node_cache[:ordinal_0_to_9].has_key?(index)
        cached = node_cache[:ordinal_0_to_9][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_ordinal_0
      if r1
        r0 = r1
      else
        r2 = _nt_ordinal_1_to_9
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:ordinal_0_to_9][start_index] = r0

      r0
    end

    def _nt_ordinal_0
      start_index = index
      if node_cache[:ordinal_0].has_key?(index)
        cached = node_cache[:ordinal_0][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if has_terminal?("0th", false, index)
        r0 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure("0th")
        r0 = nil
      end

      node_cache[:ordinal_0][start_index] = r0

      r0
    end

    def _nt_ordinal_1_to_9
      start_index = index
      if node_cache[:ordinal_1_to_9].has_key?(index)
        cached = node_cache[:ordinal_1_to_9][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_ordinal_1
      if r1
        r0 = r1
      else
        r2 = _nt_ordinal_2
        if r2
          r0 = r2
        else
          r3 = _nt_ordinal_3
          if r3
            r0 = r3
          else
            r4 = _nt_ordinal_4_to_9
            if r4
              r0 = r4
            else
              @index = i0
              r0 = nil
            end
          end
        end
      end

      node_cache[:ordinal_1_to_9][start_index] = r0

      r0
    end

    def _nt_ordinal_1
      start_index = index
      if node_cache[:ordinal_1].has_key?(index)
        cached = node_cache[:ordinal_1][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if has_terminal?("1st", false, index)
        r0 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure("1st")
        r0 = nil
      end

      node_cache[:ordinal_1][start_index] = r0

      r0
    end

    def _nt_ordinal_2
      start_index = index
      if node_cache[:ordinal_2].has_key?(index)
        cached = node_cache[:ordinal_2][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if has_terminal?("2nd", false, index)
        r0 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure("2nd")
        r0 = nil
      end

      node_cache[:ordinal_2][start_index] = r0

      r0
    end

    def _nt_ordinal_3
      start_index = index
      if node_cache[:ordinal_3].has_key?(index)
        cached = node_cache[:ordinal_3][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if has_terminal?("3rd", false, index)
        r0 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure("3rd")
        r0 = nil
      end

      node_cache[:ordinal_3][start_index] = r0

      r0
    end

    module Ordinal4To90
    end

    def _nt_ordinal_4_to_9
      start_index = index
      if node_cache[:ordinal_4_to_9].has_key?(index)
        cached = node_cache[:ordinal_4_to_9][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('\G[4-9]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      s0 << r1
      if r1
        if has_terminal?("th", false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure("th")
          r2 = nil
        end
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Ordinal4To90)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:ordinal_4_to_9][start_index] = r0

      r0
    end

    module DateYearSeparator0
      def optional_hspace1
        elements[0]
      end

      def optional_hspace2
        elements[2]
      end
    end

    def _nt_date_year_separator
      start_index = index
      if node_cache[:date_year_separator].has_key?(index)
        cached = node_cache[:date_year_separator][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      i1, s1 = index, []
      r2 = _nt_optional_hspace
      s1 << r2
      if r2
        if has_terminal?('\G[/,-]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        s1 << r3
        if r3
          r4 = _nt_optional_hspace
          s1 << r4
        end
      end
      if s1.last
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        r1.extend(DateYearSeparator0)
      else
        @index = i1
        r1 = nil
      end
      if r1
        r0 = r1
      else
        r5 = _nt_required_hspace
        if r5
          r0 = r5
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:date_year_separator][start_index] = r0

      r0
    end

    def _nt_month_day_separator
      start_index = index
      if node_cache[:month_day_separator].has_key?(index)
        cached = node_cache[:month_day_separator][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      r0 = _nt_required_hspace

      node_cache[:month_day_separator][start_index] = r0

      r0
    end

  end

  class DatesParser < Treetop::Runtime::CompiledParser
    include Dates
  end

end


