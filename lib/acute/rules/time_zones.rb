# Autogenerated from a Treetop grammar. Edits may be lost.



require 'treetop'

module Acute::Rules
  module TimeZones
    include Treetop::Runtime

    def root
      @root ||= :time_zone
    end

    def _nt_time_zone
      start_index = index
      if node_cache[:time_zone].has_key?(index)
        cached = node_cache[:time_zone][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_time_zone_offset
      if r1
        r0 = r1
      else
        r2 = _nt_time_zone_utc
        if r2
          r0 = r2
        else
          r3 = _nt_time_zone_us
          if r3
            r0 = r3
          else
            @index = i0
            r0 = nil
          end
        end
      end

      node_cache[:time_zone][start_index] = r0

      r0
    end

    module TimeZoneOffset0
    end

    module TimeZoneOffset1
    end

    module TimeZoneOffset2
      def operator
        elements[0]
      end

      def hours
        elements[1]
      end

      def mins
        elements[3]
      end
    end

    module TimeZoneOffset3
      def value; text_value; end
    end

    def _nt_time_zone_offset
      start_index = index
      if node_cache[:time_zone_offset].has_key?(index)
        cached = node_cache[:time_zone_offset][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      i1 = index
      if has_terminal?("+", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("+")
        r2 = nil
      end
      if r2
        r1 = r2
      else
        if has_terminal?("-", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("-")
          r3 = nil
        end
        if r3
          r1 = r3
        else
          @index = i1
          r1 = nil
        end
      end
      s0 << r1
      if r1
        i4 = index
        i5, s5 = index, []
        if has_terminal?("1", false, index)
          r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("1")
          r6 = nil
        end
        s5 << r6
        if r6
          if has_terminal?('\G[0-4]', true, index)
            r7 = true
            @index += 1
          else
            r7 = nil
          end
          s5 << r7
        end
        if s5.last
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          r5.extend(TimeZoneOffset0)
        else
          @index = i5
          r5 = nil
        end
        if r5
          r4 = r5
        else
          i8, s8 = index, []
          if has_terminal?("0", false, index)
            r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("0")
            r9 = nil
          end
          s8 << r9
          if r9
            if has_terminal?('\G[1-9]', true, index)
              r10 = true
              @index += 1
            else
              r10 = nil
            end
            s8 << r10
          end
          if s8.last
            r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
            r8.extend(TimeZoneOffset1)
          else
            @index = i8
            r8 = nil
          end
          if r8
            r4 = r8
          else
            @index = i4
            r4 = nil
          end
        end
        s0 << r4
        if r4
          if has_terminal?(":", false, index)
            r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(":")
            r11 = nil
          end
          s0 << r11
          if r11
            i12 = index
            if has_terminal?("00", false, index)
              r13 = instantiate_node(SyntaxNode,input, index...(index + 2))
              @index += 2
            else
              terminal_parse_failure("00")
              r13 = nil
            end
            if r13
              r12 = r13
            else
              if has_terminal?("30", false, index)
                r14 = instantiate_node(SyntaxNode,input, index...(index + 2))
                @index += 2
              else
                terminal_parse_failure("30")
                r14 = nil
              end
              if r14
                r12 = r14
              else
                if has_terminal?("45", false, index)
                  r15 = instantiate_node(SyntaxNode,input, index...(index + 2))
                  @index += 2
                else
                  terminal_parse_failure("45")
                  r15 = nil
                end
                if r15
                  r12 = r15
                else
                  @index = i12
                  r12 = nil
                end
              end
            end
            s0 << r12
          end
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(TimeZoneOffset2)
        r0.extend(TimeZoneOffset3)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:time_zone_offset][start_index] = r0

      r0
    end

    module TimeZoneUtc0
    end

    module TimeZoneUtc1
      def value; "utc"; end
    end

    def _nt_time_zone_utc
      start_index = index
      if node_cache[:time_zone_utc].has_key?(index)
        cached = node_cache[:time_zone_utc][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?("u", false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("u")
        r1 = nil
      end
      s0 << r1
      if r1
        r3 = _nt_abbreviated
        if r3
          r2 = r3
        else
          r2 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r2
        if r2
          if has_terminal?("t", false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("t")
            r4 = nil
          end
          s0 << r4
          if r4
            r6 = _nt_abbreviated
            if r6
              r5 = r6
            else
              r5 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r5
            if r5
              if has_terminal?("c", false, index)
                r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure("c")
                r7 = nil
              end
              s0 << r7
              if r7
                r9 = _nt_abbreviated
                if r9
                  r8 = r9
                else
                  r8 = instantiate_node(SyntaxNode,input, index...index)
                end
                s0 << r8
                if r8
                  i10 = index
                  if has_terminal?('\G[a-z]', true, index)
                    r11 = true
                    @index += 1
                  else
                    r11 = nil
                  end
                  if r11
                    r10 = nil
                  else
                    @index = i10
                    r10 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s0 << r10
                end
              end
            end
          end
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(TimeZoneUtc0)
        r0.extend(TimeZoneUtc1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:time_zone_utc][start_index] = r0

      r0
    end

    module TimeZoneUs0
    end

    module TimeZoneUs1
      def value; text_value.gsub(/[^a-z]/,''); end
    end

    def _nt_time_zone_us
      start_index = index
      if node_cache[:time_zone_us].has_key?(index)
        cached = node_cache[:time_zone_us][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('\G[pmce]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      s0 << r1
      if r1
        r3 = _nt_abbreviated
        if r3
          r2 = r3
        else
          r2 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r2
        if r2
          if has_terminal?('\G[sd]', true, index)
            r4 = true
            @index += 1
          else
            r4 = nil
          end
          s0 << r4
          if r4
            r6 = _nt_abbreviated
            if r6
              r5 = r6
            else
              r5 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r5
            if r5
              if has_terminal?("t", false, index)
                r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure("t")
                r7 = nil
              end
              s0 << r7
              if r7
                r9 = _nt_abbreviated
                if r9
                  r8 = r9
                else
                  r8 = instantiate_node(SyntaxNode,input, index...index)
                end
                s0 << r8
                if r8
                  i10 = index
                  if has_terminal?('\G[a-z]', true, index)
                    r11 = true
                    @index += 1
                  else
                    r11 = nil
                  end
                  if r11
                    r10 = nil
                  else
                    @index = i10
                    r10 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s0 << r10
                end
              end
            end
          end
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(TimeZoneUs0)
        r0.extend(TimeZoneUs1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:time_zone_us][start_index] = r0

      r0
    end

  end

  class TimeZonesParser < Treetop::Runtime::CompiledParser
    include TimeZones
  end

end

