# Autogenerated from a Treetop grammar. Edits may be lost.



module Acute::Rules
  module Fragments
    include Treetop::Runtime

    def root
      @root ||= :fraction
    end

    def _nt_fraction
      start_index = index
      if node_cache[:fraction].has_key?(index)
        cached = node_cache[:fraction][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_fraction_early_prefix
      if r1
        r0 = r1
      else
        r2 = _nt_fraction_mid_prefix
        if r2
          r0 = r2
        else
          r3 = _nt_fraction_late_prefix
          if r3
            r0 = r3
          else
            @index = i0
            r0 = nil
          end
        end
      end

      node_cache[:fraction][start_index] = r0

      r0
    end

    module FractionEarlyPrefix0
      def name
        elements[0]
      end

      def space_or_dash
        elements[1]
      end
    end

    def _nt_fraction_early_prefix
      start_index = index
      if node_cache[:fraction_early_prefix].has_key?(index)
        cached = node_cache[:fraction_early_prefix][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?("early", false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
        @index += 5
      else
        terminal_parse_failure("early")
        r1 = nil
      end
      s0 << r1
      if r1
        r2 = _nt_space_or_dash
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(FractionEarlyPrefix0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:fraction_early_prefix][start_index] = r0

      r0
    end

    module FractionMidPrefix0
      def name
        elements[0]
      end

      def space_or_dash
        elements[1]
      end
    end

    def _nt_fraction_mid_prefix
      start_index = index
      if node_cache[:fraction_mid_prefix].has_key?(index)
        cached = node_cache[:fraction_mid_prefix][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?("mid", false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure("mid")
        r1 = nil
      end
      s0 << r1
      if r1
        r2 = _nt_space_or_dash
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(FractionMidPrefix0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:fraction_mid_prefix][start_index] = r0

      r0
    end

    module FractionLatePrefix0
      def name
        elements[0]
      end

      def space_or_dash
        elements[1]
      end
    end

    def _nt_fraction_late_prefix
      start_index = index
      if node_cache[:fraction_late_prefix].has_key?(index)
        cached = node_cache[:fraction_late_prefix][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?("late", false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
        @index += 4
      else
        terminal_parse_failure("late")
        r1 = nil
      end
      s0 << r1
      if r1
        r2 = _nt_space_or_dash
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(FractionLatePrefix0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:fraction_late_prefix][start_index] = r0

      r0
    end

  end

  class FragmentsParser < Treetop::Runtime::CompiledParser
    include Fragments
  end

end

