# Autogenerated from a Treetop grammar. Edits may be lost.



module Acute::Rules::Imprecise
  module Months
    include Treetop::Runtime

    def root
      @root ||= :qualified_month
    end

    def _nt_qualified_month
      start_index = index
      if node_cache[:qualified_month].has_key?(index)
        cached = node_cache[:qualified_month][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_precise_month
      if r1
        r0 = r1
      else
        r2 = _nt_imprecise_month_of_year
        if r2
          r0 = r2
        else
          r3 = _nt_imprecise_month
          if r3
            r0 = r3
          else
            @index = i0
            r0 = nil
          end
        end
      end

      node_cache[:qualified_month][start_index] = r0

      r0
    end

    module ImpreciseMonthOfYear0
      def imprecise
        elements[0]
      end

      def month_year_separator
        elements[1]
      end

      def year_node
        elements[2]
      end
    end

    module ImpreciseMonthOfYear1
      def repeating_month_node; imprecise.repeating_month_node; end
      def precision; :year; end
    end

    def _nt_imprecise_month_of_year
      start_index = index
      if node_cache[:imprecise_month_of_year].has_key?(index)
        cached = node_cache[:imprecise_month_of_year][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_imprecise_repeating_month
      s0 << r1
      if r1
        r2 = _nt_month_year_separator
        s0 << r2
        if r2
          r3 = _nt_precise_year
          s0 << r3
        end
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::MonthNode,input, i0...index, s0)
        r0.extend(ImpreciseMonthOfYear0)
        r0.extend(ImpreciseMonthOfYear1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:imprecise_month_of_year][start_index] = r0

      r0
    end

    module ImpreciseMonth0
      def open_parens
        elements[0]
      end

      def imprecise
        elements[1]
      end

      def close_parens
        elements[2]
      end
    end

    module ImpreciseMonth1
      def repeating_month_node; imprecise.repeating_month_node; end
      def year_node; imprecise.year_node; end
      def precision; nil; end
    end

    def _nt_imprecise_month
      start_index = index
      if node_cache[:imprecise_month].has_key?(index)
        cached = node_cache[:imprecise_month][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_open_parens
      s0 << r1
      if r1
        r2 = _nt_precise_month
        s0 << r2
        if r2
          r3 = _nt_close_parens
          s0 << r3
        end
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::MonthNode,input, i0...index, s0)
        r0.extend(ImpreciseMonth0)
        r0.extend(ImpreciseMonth1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:imprecise_month][start_index] = r0

      r0
    end

    def _nt_qualified_repeating_month
      start_index = index
      if node_cache[:qualified_repeating_month].has_key?(index)
        cached = node_cache[:qualified_repeating_month][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_precise_repeating_month
      if r1
        r0 = r1
      else
        r2 = _nt_imprecise_repeating_month
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:qualified_repeating_month][start_index] = r0

      r0
    end

    module ImpreciseRepeatingMonth0
      def open_parens
        elements[0]
      end

      def repeating_month_node
        elements[1]
      end

      def close_parens
        elements[2]
      end
    end

    def _nt_imprecise_repeating_month
      start_index = index
      if node_cache[:imprecise_repeating_month].has_key?(index)
        cached = node_cache[:imprecise_repeating_month][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_open_parens
      s0 << r1
      if r1
        r2 = _nt_precise_repeating_month
        s0 << r2
        if r2
          r3 = _nt_close_parens
          s0 << r3
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(ImpreciseRepeatingMonth0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:imprecise_repeating_month][start_index] = r0

      r0
    end

    def _nt_qualified_fractional_month
      start_index = index
      if node_cache[:qualified_fractional_month].has_key?(index)
        cached = node_cache[:qualified_fractional_month][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_precise_fractional_month
      if r1
        r0 = r1
      else
        r2 = _nt_imprecise_fractional_month_of_year
        if r2
          r0 = r2
        else
          r3 = _nt_imprecise_fractional_month
          if r3
            r0 = r3
          else
            @index = i0
            r0 = nil
          end
        end
      end

      node_cache[:qualified_fractional_month][start_index] = r0

      r0
    end

    module ImpreciseFractionalMonthOfYear0
      def fractional_month_node
        elements[0]
      end

      def month_year_separator
        elements[1]
      end

      def year_node
        elements[2]
      end
    end

    module ImpreciseFractionalMonthOfYear1
      def precision; :year; end
    end

    def _nt_imprecise_fractional_month_of_year
      start_index = index
      if node_cache[:imprecise_fractional_month_of_year].has_key?(index)
        cached = node_cache[:imprecise_fractional_month_of_year][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_imprecise_repeating_fractional_month
      s0 << r1
      if r1
        r2 = _nt_month_year_separator
        s0 << r2
        if r2
          r3 = _nt_precise_year
          s0 << r3
        end
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::MonthFragmentNode,input, i0...index, s0)
        r0.extend(ImpreciseFractionalMonthOfYear0)
        r0.extend(ImpreciseFractionalMonthOfYear1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:imprecise_fractional_month_of_year][start_index] = r0

      r0
    end

    module ImpreciseFractionalMonth0
      def open_parens
        elements[0]
      end

      def imprecise
        elements[1]
      end

      def close_parens
        elements[2]
      end
    end

    module ImpreciseFractionalMonth1
      def fractional_month_node; imprecise.fractional_month_node; end
      def year_node; imprecise.year_node; end
      def precision; nil; end
    end

    def _nt_imprecise_fractional_month
      start_index = index
      if node_cache[:imprecise_fractional_month].has_key?(index)
        cached = node_cache[:imprecise_fractional_month][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_open_parens
      s0 << r1
      if r1
        r2 = _nt_precise_fractional_month
        s0 << r2
        if r2
          r3 = _nt_close_parens
          s0 << r3
        end
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::MonthFragmentNode,input, i0...index, s0)
        r0.extend(ImpreciseFractionalMonth0)
        r0.extend(ImpreciseFractionalMonth1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:imprecise_fractional_month][start_index] = r0

      r0
    end

    module ImpreciseRepeatingFractionalMonth0
      def open_parens
        elements[0]
      end

      def imprecise
        elements[1]
      end

      def close_parens
        elements[2]
      end
    end

    module ImpreciseRepeatingFractionalMonth1
      def fraction_node; imprecise.fraction_node; end
      def repeating_month_node; imprecise.repeating_month_node; end
    end

    def _nt_imprecise_repeating_fractional_month
      start_index = index
      if node_cache[:imprecise_repeating_fractional_month].has_key?(index)
        cached = node_cache[:imprecise_repeating_fractional_month][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_open_parens
      s0 << r1
      if r1
        r2 = _nt_precise_repeating_fractional_month
        s0 << r2
        if r2
          r3 = _nt_close_parens
          s0 << r3
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(ImpreciseRepeatingFractionalMonth0)
        r0.extend(ImpreciseRepeatingFractionalMonth1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:imprecise_repeating_fractional_month][start_index] = r0

      r0
    end

  end

  class MonthsParser < Treetop::Runtime::CompiledParser
    include Months
  end

end


