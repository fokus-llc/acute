# Autogenerated from a Treetop grammar. Edits may be lost.



module Acute::Rules::Imprecise
  module CalendarYear
    include Treetop::Runtime

    def root
      @root ||= :qualified_year
    end

    def _nt_qualified_year
      start_index = index
      if node_cache[:qualified_year].has_key?(index)
        cached = node_cache[:qualified_year][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_precise_year
      if r1
        r0 = r1
      else
        r2 = _nt_imprecise_year
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:qualified_year][start_index] = r0

      r0
    end

    module ImpreciseYear0
      def open_parens
        elements[0]
      end

      def imprecise
        elements[1]
      end

      def close_parens
        elements[2]
      end
    end

    module ImpreciseYear1
      def year_number_node; imprecise.year_number_node; end
      def era_affix; imprecise.era_affix; end
      def style_affix; imprecise.style_affix; end
      def precise?; false; end

      def precision; nil; end
    end

    def _nt_imprecise_year
      start_index = index
      if node_cache[:imprecise_year].has_key?(index)
        cached = node_cache[:imprecise_year][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_open_parens
      s0 << r1
      if r1
        r2 = _nt_precise_year
        s0 << r2
        if r2
          r3 = _nt_close_parens
          s0 << r3
        end
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::YearNode,input, i0...index, s0)
        r0.extend(ImpreciseYear0)
        r0.extend(ImpreciseYear1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:imprecise_year][start_index] = r0

      r0
    end

    def _nt_qualified_fractional_year
      start_index = index
      if node_cache[:qualified_fractional_year].has_key?(index)
        cached = node_cache[:qualified_fractional_year][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_precise_fractional_year
      if r1
        r0 = r1
      else
        r2 = _nt_imprecise_fractional_year
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:qualified_fractional_year][start_index] = r0

      r0
    end

    module ImpreciseFractionalYear0
      def open_parens
        elements[0]
      end

      def imprecise
        elements[1]
      end

      def close_parens
        elements[2]
      end
    end

    module ImpreciseFractionalYear1
      def year_node; imprecise.year_node; end
      def fraction_node; imprecise.fraction_node; end
      def precise?; false; end

      def precision; nil; end
    end

    def _nt_imprecise_fractional_year
      start_index = index
      if node_cache[:imprecise_fractional_year].has_key?(index)
        cached = node_cache[:imprecise_fractional_year][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_open_parens
      s0 << r1
      if r1
        r2 = _nt_precise_fractional_year
        s0 << r2
        if r2
          r3 = _nt_close_parens
          s0 << r3
        end
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::YearFragmentNode,input, i0...index, s0)
        r0.extend(ImpreciseFractionalYear0)
        r0.extend(ImpreciseFractionalYear1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:imprecise_fractional_year][start_index] = r0

      r0
    end

  end

  class CalendarYearParser < Treetop::Runtime::CompiledParser
    include CalendarYear
  end

end

