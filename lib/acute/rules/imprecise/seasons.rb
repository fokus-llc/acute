# Autogenerated from a Treetop grammar. Edits may be lost.



module Acute::Rules::Imprecise
  module Seasons
    include Treetop::Runtime

    def root
      @root ||= :qualified_fractional_season
    end

    def _nt_qualified_fractional_season
      start_index = index
      if node_cache[:qualified_fractional_season].has_key?(index)
        cached = node_cache[:qualified_fractional_season][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_precise_fractional_season
      if r1
        r0 = r1
      else
        r2 = _nt_imprecise_fractional_season_of_year
        if r2
          r0 = r2
        else
          r3 = _nt_imprecise_fractional_season
          if r3
            r0 = r3
          else
            @index = i0
            r0 = nil
          end
        end
      end

      node_cache[:qualified_fractional_season][start_index] = r0

      r0
    end

    module ImpreciseFractionalSeasonOfYear0
      def fractional_season_node
        elements[0]
      end

      def season_year_separator
        elements[1]
      end

      def year_node
        elements[2]
      end
    end

    module ImpreciseFractionalSeasonOfYear1
      def precise_fractional_season?; false; end

      def precision; :year; end
    end

    def _nt_imprecise_fractional_season_of_year
      start_index = index
      if node_cache[:imprecise_fractional_season_of_year].has_key?(index)
        cached = node_cache[:imprecise_fractional_season_of_year][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_imprecise_repeating_fractional_season
      s0 << r1
      if r1
        r2 = _nt_season_year_separator
        s0 << r2
        if r2
          r3 = _nt_precise_year
          s0 << r3
        end
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::SeasonFragmentNode,input, i0...index, s0)
        r0.extend(ImpreciseFractionalSeasonOfYear0)
        r0.extend(ImpreciseFractionalSeasonOfYear1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:imprecise_fractional_season_of_year][start_index] = r0

      r0
    end

    module ImpreciseFractionalSeason0
      def open_parens
        elements[0]
      end

      def imprecise
        elements[1]
      end

      def close_parens
        elements[2]
      end
    end

    module ImpreciseFractionalSeason1
      def fractional_season_node; imprecise.fractional_season_node; end
      def year_node; imprecise.year_node; end
      def precise?; false; end

      def precision; nil; end
    end

    def _nt_imprecise_fractional_season
      start_index = index
      if node_cache[:imprecise_fractional_season].has_key?(index)
        cached = node_cache[:imprecise_fractional_season][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_open_parens
      s0 << r1
      if r1
        r2 = _nt_precise_fractional_season
        s0 << r2
        if r2
          r3 = _nt_close_parens
          s0 << r3
        end
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::SeasonFragmentNode,input, i0...index, s0)
        r0.extend(ImpreciseFractionalSeason0)
        r0.extend(ImpreciseFractionalSeason1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:imprecise_fractional_season][start_index] = r0

      r0
    end

    module ImpreciseRepeatingFractionalSeason0
      def open_parens
        elements[0]
      end

      def imprecise
        elements[1]
      end

      def close_parens
        elements[2]
      end
    end

    module ImpreciseRepeatingFractionalSeason1
      def fraction_node; imprecise.fraction_node; end
      def repeating_season_node; imprecise.repeating_season_node; end
    end

    def _nt_imprecise_repeating_fractional_season
      start_index = index
      if node_cache[:imprecise_repeating_fractional_season].has_key?(index)
        cached = node_cache[:imprecise_repeating_fractional_season][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_open_parens
      s0 << r1
      if r1
        r2 = _nt_precise_repeating_fractional_season
        s0 << r2
        if r2
          r3 = _nt_close_parens
          s0 << r3
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(ImpreciseRepeatingFractionalSeason0)
        r0.extend(ImpreciseRepeatingFractionalSeason1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:imprecise_repeating_fractional_season][start_index] = r0

      r0
    end

    def _nt_qualified_season
      start_index = index
      if node_cache[:qualified_season].has_key?(index)
        cached = node_cache[:qualified_season][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_precise_season
      if r1
        r0 = r1
      else
        r2 = _nt_imprecise_season_of_year
        if r2
          r0 = r2
        else
          r3 = _nt_imprecise_season
          if r3
            r0 = r3
          else
            @index = i0
            r0 = nil
          end
        end
      end

      node_cache[:qualified_season][start_index] = r0

      r0
    end

    module ImpreciseSeasonOfYear0
      def imprecise
        elements[0]
      end

      def season_year_separator
        elements[1]
      end

      def year_node
        elements[2]
      end
    end

    module ImpreciseSeasonOfYear1
      def repeating_season_node; imprecise.season; end
      def precise_season?; false; end

      def precision; :year; end
    end

    def _nt_imprecise_season_of_year
      start_index = index
      if node_cache[:imprecise_season_of_year].has_key?(index)
        cached = node_cache[:imprecise_season_of_year][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_imprecise_repeating_season
      s0 << r1
      if r1
        r2 = _nt_season_year_separator
        s0 << r2
        if r2
          r3 = _nt_precise_year
          s0 << r3
        end
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::SeasonNode,input, i0...index, s0)
        r0.extend(ImpreciseSeasonOfYear0)
        r0.extend(ImpreciseSeasonOfYear1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:imprecise_season_of_year][start_index] = r0

      r0
    end

    module ImpreciseSeason0
      def open_parens
        elements[0]
      end

      def imprecise
        elements[1]
      end

      def close_parens
        elements[2]
      end
    end

    module ImpreciseSeason1
      def repeating_season_node; imprecise.repeating_season_node; end
      def year_node; imprecise.year_node; end
      def precise?; false; end

      def precision; nil; end
    end

    def _nt_imprecise_season
      start_index = index
      if node_cache[:imprecise_season].has_key?(index)
        cached = node_cache[:imprecise_season][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_open_parens
      s0 << r1
      if r1
        r2 = _nt_precise_season
        s0 << r2
        if r2
          r3 = _nt_close_parens
          s0 << r3
        end
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::SeasonNode,input, i0...index, s0)
        r0.extend(ImpreciseSeason0)
        r0.extend(ImpreciseSeason1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:imprecise_season][start_index] = r0

      r0
    end

    module ImpreciseRepeatingSeason0
      def open_parens
        elements[0]
      end

      def season
        elements[1]
      end

      def close_parens
        elements[2]
      end
    end

    def _nt_imprecise_repeating_season
      start_index = index
      if node_cache[:imprecise_repeating_season].has_key?(index)
        cached = node_cache[:imprecise_repeating_season][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_open_parens
      s0 << r1
      if r1
        r2 = _nt_precise_repeating_season
        s0 << r2
        if r2
          r3 = _nt_close_parens
          s0 << r3
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(ImpreciseRepeatingSeason0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:imprecise_repeating_season][start_index] = r0

      r0
    end

  end

  class SeasonsParser < Treetop::Runtime::CompiledParser
    include Seasons
  end

end

