# Autogenerated from a Treetop grammar. Edits may be lost.



module Acute::Rules
  module GeologicalYears
    include Treetop::Runtime

    def root
      @root ||= :geological_year
    end

    def _nt_geological_year
      start_index = index
      if node_cache[:geological_year].has_key?(index)
        cached = node_cache[:geological_year][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_quantified_geological_year
      if r1
        r0 = r1
      else
        r2 = _nt_compact_geological_year
        if r2
          r0 = r2
        else
          r3 = _nt_verbose_geological_year
          if r3
            r0 = r3
          else
            @index = i0
            r0 = nil
          end
        end
      end

      node_cache[:geological_year][start_index] = r0

      r0
    end

    module QuantifiedGeologicalYear0
      def year_number_node
        elements[0]
      end

      def required_hspace
        elements[1]
      end

    end

    def _nt_quantified_geological_year
      start_index = index
      if node_cache[:quantified_geological_year].has_key?(index)
        cached = node_cache[:quantified_geological_year][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_geological_quantified_magnitude
      s0 << r1
      if r1
        r2 = _nt_required_hspace
        s0 << r2
        if r2
          i3 = index
          r4 = _nt_era_bp
          if r4
            r3 = r4
          else
            r5 = _nt_era_bp_verbose
            if r5
              r3 = r5
            else
              @index = i3
              r3 = nil
            end
          end
          s0 << r3
        end
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::GeologicalYearNode,input, i0...index, s0)
        r0.extend(QuantifiedGeologicalYear0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:quantified_geological_year][start_index] = r0

      r0
    end

    module QuantifiedVerboseGeologicalYear0
      def year_number_node
        elements[0]
      end

      def required_hspace
        elements[1]
      end

      def era_bp_verbose
        elements[2]
      end
    end

    def _nt_quantified_verbose_geological_year
      start_index = index
      if node_cache[:quantified_verbose_geological_year].has_key?(index)
        cached = node_cache[:quantified_verbose_geological_year][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_geological_quantified_magnitude
      s0 << r1
      if r1
        r2 = _nt_required_hspace
        s0 << r2
        if r2
          r3 = _nt_era_bp_verbose
          s0 << r3
        end
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::GeologicalYearNode,input, i0...index, s0)
        r0.extend(QuantifiedVerboseGeologicalYear0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:quantified_verbose_geological_year][start_index] = r0

      r0
    end

    module CompactGeologicalYear0
      def year_number_node
        elements[0]
      end

      def optional_hspace
        elements[1]
      end

      def era_bp
        elements[2]
      end
    end

    def _nt_compact_geological_year
      start_index = index
      if node_cache[:compact_geological_year].has_key?(index)
        cached = node_cache[:compact_geological_year][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_geological_number
      s0 << r1
      if r1
        r2 = _nt_optional_hspace
        s0 << r2
        if r2
          r3 = _nt_era_bp
          s0 << r3
        end
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::GeologicalYearNode,input, i0...index, s0)
        r0.extend(CompactGeologicalYear0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:compact_geological_year][start_index] = r0

      r0
    end

    module VerboseGeologicalYear0
      def year_number_node
        elements[0]
      end

      def required_hspace
        elements[1]
      end

      def era_bp_verbose
        elements[2]
      end
    end

    def _nt_verbose_geological_year
      start_index = index
      if node_cache[:verbose_geological_year].has_key?(index)
        cached = node_cache[:verbose_geological_year][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_geological_number
      s0 << r1
      if r1
        r2 = _nt_required_hspace
        s0 << r2
        if r2
          r3 = _nt_era_bp_verbose
          s0 << r3
        end
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::GeologicalYearNode,input, i0...index, s0)
        r0.extend(VerboseGeologicalYear0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:verbose_geological_year][start_index] = r0

      r0
    end

    module GeologicalQuantifiedMagnitude0
      def natural_number
        elements[0]
      end

      def space_or_dash
        elements[1]
      end

      def geological_magnitude
        elements[2]
      end
    end

    module GeologicalQuantifiedMagnitude1
      def value; natural_number.to_i * geological_magnitude.factor; end
    end

    def _nt_geological_quantified_magnitude
      start_index = index
      if node_cache[:geological_quantified_magnitude].has_key?(index)
        cached = node_cache[:geological_quantified_magnitude][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_natural_number
      s0 << r1
      if r1
        r2 = _nt_space_or_dash
        s0 << r2
        if r2
          r3 = _nt_geological_magnitude
          s0 << r3
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(GeologicalQuantifiedMagnitude0)
        r0.extend(GeologicalQuantifiedMagnitude1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:geological_quantified_magnitude][start_index] = r0

      r0
    end

    def _nt_geological_magnitude
      start_index = index
      if node_cache[:geological_magnitude].has_key?(index)
        cached = node_cache[:geological_magnitude][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_magnitude_million
      if r1
        r0 = r1
      else
        r2 = _nt_magnitude_billion
        if r2
          r0 = r2
        else
          r3 = _nt_magnitude_trillion
          if r3
            r0 = r3
          else
            @index = i0
            r0 = nil
          end
        end
      end

      node_cache[:geological_magnitude][start_index] = r0

      r0
    end

    module MagnitudeMillion0
      def factor; 1_000_000; end
    end

    def _nt_magnitude_million
      start_index = index
      if node_cache[:magnitude_million].has_key?(index)
        cached = node_cache[:magnitude_million][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if has_terminal?("million", false, index)
        r0 = instantiate_node(SyntaxNode,input, index...(index + 7))
        r0.extend(MagnitudeMillion0)
        @index += 7
      else
        terminal_parse_failure("million")
        r0 = nil
      end

      node_cache[:magnitude_million][start_index] = r0

      r0
    end

    module MagnitudeBillion0
      def factor; 1_000_000_000; end
    end

    def _nt_magnitude_billion
      start_index = index
      if node_cache[:magnitude_billion].has_key?(index)
        cached = node_cache[:magnitude_billion][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if has_terminal?("billion", false, index)
        r0 = instantiate_node(SyntaxNode,input, index...(index + 7))
        r0.extend(MagnitudeBillion0)
        @index += 7
      else
        terminal_parse_failure("billion")
        r0 = nil
      end

      node_cache[:magnitude_billion][start_index] = r0

      r0
    end

    module MagnitudeTrillion0
      def factor; 1_000_000_000_000; end
    end

    def _nt_magnitude_trillion
      start_index = index
      if node_cache[:magnitude_trillion].has_key?(index)
        cached = node_cache[:magnitude_trillion][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if has_terminal?("trillion", false, index)
        r0 = instantiate_node(SyntaxNode,input, index...(index + 8))
        r0.extend(MagnitudeTrillion0)
        @index += 8
      else
        terminal_parse_failure("trillion")
        r0 = nil
      end

      node_cache[:magnitude_trillion][start_index] = r0

      r0
    end

    def _nt_geological_number
      start_index = index
      if node_cache[:geological_number].has_key?(index)
        cached = node_cache[:geological_number][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_natural_number_gte_100
      if r1
        r0 = r1
      else
        r2 = _nt_natural_number_commified
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:geological_number][start_index] = r0

      r0
    end

    module EraBp0
    end

    module EraBp1
      def value; "bp"; end
    end

    def _nt_era_bp
      start_index = index
      if node_cache[:era_bp].has_key?(index)
        cached = node_cache[:era_bp][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?("b", false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("b")
        r1 = nil
      end
      s0 << r1
      if r1
        r3 = _nt_abbreviated
        if r3
          r2 = r3
        else
          r2 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r2
        if r2
          if has_terminal?("p", false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("p")
            r4 = nil
          end
          s0 << r4
          if r4
            r6 = _nt_abbreviated
            if r6
              r5 = r6
            else
              r5 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r5
          end
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(EraBp0)
        r0.extend(EraBp1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:era_bp][start_index] = r0

      r0
    end

    module EraBpVerbose0
      def required_hspace
        elements[1]
      end

    end

    module EraBpVerbose1
      def required_hspace
        elements[1]
      end

    end

    module EraBpVerbose2
      def value; "bp"; end
    end

    def _nt_era_bp_verbose
      start_index = index
      if node_cache[:era_bp_verbose].has_key?(index)
        cached = node_cache[:era_bp_verbose][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?("years", false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
        @index += 5
      else
        terminal_parse_failure("years")
        r1 = nil
      end
      s0 << r1
      if r1
        r2 = _nt_required_hspace
        s0 << r2
        if r2
          i3 = index
          if has_terminal?("ago", false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 3))
            @index += 3
          else
            terminal_parse_failure("ago")
            r4 = nil
          end
          if r4
            r3 = r4
          else
            r5 = _nt_era_bp
            if r5
              r3 = r5
            else
              i6, s6 = index, []
              if has_terminal?("before", false, index)
                r7 = instantiate_node(SyntaxNode,input, index...(index + 6))
                @index += 6
              else
                terminal_parse_failure("before")
                r7 = nil
              end
              s6 << r7
              if r7
                r8 = _nt_required_hspace
                s6 << r8
                if r8
                  if has_terminal?("present", false, index)
                    r9 = instantiate_node(SyntaxNode,input, index...(index + 7))
                    @index += 7
                  else
                    terminal_parse_failure("present")
                    r9 = nil
                  end
                  s6 << r9
                end
              end
              if s6.last
                r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
                r6.extend(EraBpVerbose0)
              else
                @index = i6
                r6 = nil
              end
              if r6
                r3 = r6
              else
                @index = i3
                r3 = nil
              end
            end
          end
          s0 << r3
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(EraBpVerbose1)
        r0.extend(EraBpVerbose2)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:era_bp_verbose][start_index] = r0

      r0
    end

    module NaturalNumberGte1000
    end

    def _nt_natural_number_gte_100
      start_index = index
      if node_cache[:natural_number_gte_100].has_key?(index)
        cached = node_cache[:natural_number_gte_100][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      s1, i1 = [], index
      loop do
        if has_terminal?('\G[1-9]', true, index)
          r2 = true
          @index += 1
        else
          r2 = nil
        end
        if r2
          s1 << r2
        else
          break
        end
      end
      if s1.empty?
        @index = i1
        r1 = nil
      else
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      end
      s0 << r1
      if r1
        s3, i3 = [], index
        loop do
          if has_terminal?('\G[0-9]', true, index)
            r4 = true
            @index += 1
          else
            r4 = nil
          end
          if r4
            s3 << r4
          else
            break
          end
        end
        if s3.size < 2
          @index = i3
          r3 = nil
        else
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        end
        s0 << r3
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::IntegerNode,input, i0...index, s0)
        r0.extend(NaturalNumberGte1000)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:natural_number_gte_100][start_index] = r0

      r0
    end

    module NaturalNumberCommified0
    end

    module NaturalNumberCommified1
    end

    def _nt_natural_number_commified
      start_index = index
      if node_cache[:natural_number_commified].has_key?(index)
        cached = node_cache[:natural_number_commified][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('\G[1-9]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      s0 << r1
      if r1
        s2, i2 = [], index
        loop do
          if has_terminal?('\G[0-9]', true, index)
            r3 = true
            @index += 1
          else
            r3 = nil
          end
          if r3
            s2 << r3
          else
            break
          end
          if s2.size == 2
            break
          end
        end
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        s0 << r2
        if r2
          s4, i4 = [], index
          loop do
            i5, s5 = index, []
            if has_terminal?(",", false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(",")
              r6 = nil
            end
            s5 << r6
            if r6
              s7, i7 = [], index
              loop do
                if has_terminal?('\G[0-9]', true, index)
                  r8 = true
                  @index += 1
                else
                  r8 = nil
                end
                if r8
                  s7 << r8
                else
                  break
                end
                if s7.size == 3
                  break
                end
              end
              if s7.size < 3
                @index = i7
                r7 = nil
              else
                r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
              end
              s5 << r7
            end
            if s5.last
              r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
              r5.extend(NaturalNumberCommified0)
            else
              @index = i5
              r5 = nil
            end
            if r5
              s4 << r5
            else
              break
            end
          end
          if s4.empty?
            @index = i4
            r4 = nil
          else
            r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          end
          s0 << r4
          if r4
            i9 = index
            if has_terminal?('\G[0-9]', true, index)
              r10 = true
              @index += 1
            else
              r10 = nil
            end
            if r10
              r9 = nil
            else
              @index = i9
              r9 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r9
          end
        end
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::CommifiedIntegerNode,input, i0...index, s0)
        r0.extend(NaturalNumberCommified1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:natural_number_commified][start_index] = r0

      r0
    end

  end

  class GeologicalYearsParser < Treetop::Runtime::CompiledParser
    include GeologicalYears
  end

end

