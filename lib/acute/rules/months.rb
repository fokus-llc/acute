# Autogenerated from a Treetop grammar. Edits may be lost.



module Acute::Rules
  module Months
    include Treetop::Runtime

    def root
      @root ||= :precise_fractional_month
    end

    module PreciseFractionalMonth0
      def fractional_month_node
        elements[0]
      end

      def month_year_separator
        elements[1]
      end

      def year_node
        elements[2]
      end
    end

    def _nt_precise_fractional_month
      start_index = index
      if node_cache[:precise_fractional_month].has_key?(index)
        cached = node_cache[:precise_fractional_month][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_precise_repeating_fractional_month
      s0 << r1
      if r1
        r2 = _nt_month_year_separator
        s0 << r2
        if r2
          r3 = _nt_precise_year
          s0 << r3
        end
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::MonthFragmentNode,input, i0...index, s0)
        r0.extend(PreciseFractionalMonth0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:precise_fractional_month][start_index] = r0

      r0
    end

    module PreciseRepeatingFractionalMonth0
      def fraction_node
        elements[0]
      end

      def repeating_month_node
        elements[1]
      end
    end

    def _nt_precise_repeating_fractional_month
      start_index = index
      if node_cache[:precise_repeating_fractional_month].has_key?(index)
        cached = node_cache[:precise_repeating_fractional_month][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_fraction
      s0 << r1
      if r1
        r2 = _nt_precise_repeating_month
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(PreciseRepeatingFractionalMonth0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:precise_repeating_fractional_month][start_index] = r0

      r0
    end

    module PreciseMonth0
      def repeating_month_node
        elements[0]
      end

      def month_year_separator
        elements[1]
      end

      def year_node
        elements[2]
      end
    end

    def _nt_precise_month
      start_index = index
      if node_cache[:precise_month].has_key?(index)
        cached = node_cache[:precise_month][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_precise_repeating_month
      s0 << r1
      if r1
        r2 = _nt_month_year_separator
        s0 << r2
        if r2
          r3 = _nt_precise_year
          s0 << r3
        end
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::MonthNode,input, i0...index, s0)
        r0.extend(PreciseMonth0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:precise_month][start_index] = r0

      r0
    end

    def _nt_precise_repeating_month
      start_index = index
      if node_cache[:precise_repeating_month].has_key?(index)
        cached = node_cache[:precise_repeating_month][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_calendar_long_month
      if r1
        r0 = r1
      else
        r2 = _nt_calendar_short_month
        if r2
          r0 = r2
        else
          r3 = _nt_calendar_february
          if r3
            r0 = r3
          else
            @index = i0
            r0 = nil
          end
        end
      end

      node_cache[:precise_repeating_month][start_index] = r0

      r0
    end

    def _nt_calendar_january
      start_index = index
      if node_cache[:calendar_january].has_key?(index)
        cached = node_cache[:calendar_january][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_calendar_january_en
      if r1
        r0 = r1
      else
        r2 = _nt_calendar_january_en_abbr
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:calendar_january][start_index] = r0

      r0
    end

    module CalendarJanuaryEn0
      def index; 1; end
    end

    def _nt_calendar_january_en
      start_index = index
      if node_cache[:calendar_january_en].has_key?(index)
        cached = node_cache[:calendar_january_en][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if has_terminal?("january", false, index)
        r0 = instantiate_node(Acute::Nodes::RepeatingMonthNode,input, index...(index + 7))
        r0.extend(CalendarJanuaryEn0)
        @index += 7
      else
        terminal_parse_failure("january")
        r0 = nil
      end

      node_cache[:calendar_january_en][start_index] = r0

      r0
    end

    module CalendarJanuaryEnAbbr0
    end

    module CalendarJanuaryEnAbbr1
      def index; 1; end
    end

    def _nt_calendar_january_en_abbr
      start_index = index
      if node_cache[:calendar_january_en_abbr].has_key?(index)
        cached = node_cache[:calendar_january_en_abbr][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?("jan", false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure("jan")
        r1 = nil
      end
      s0 << r1
      if r1
        r3 = _nt_abbreviated
        if r3
          r2 = r3
        else
          r2 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::RepeatingMonthNode,input, i0...index, s0)
        r0.extend(CalendarJanuaryEnAbbr0)
        r0.extend(CalendarJanuaryEnAbbr1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:calendar_january_en_abbr][start_index] = r0

      r0
    end

    def _nt_calendar_february
      start_index = index
      if node_cache[:calendar_february].has_key?(index)
        cached = node_cache[:calendar_february][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_calendar_february_en
      if r1
        r0 = r1
      else
        r2 = _nt_calendar_february_en_abbr
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:calendar_february][start_index] = r0

      r0
    end

    module CalendarFebruaryEn0
      def index; 2; end
    end

    def _nt_calendar_february_en
      start_index = index
      if node_cache[:calendar_february_en].has_key?(index)
        cached = node_cache[:calendar_february_en][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if has_terminal?("february", false, index)
        r0 = instantiate_node(Acute::Nodes::RepeatingMonthNode,input, index...(index + 8))
        r0.extend(CalendarFebruaryEn0)
        @index += 8
      else
        terminal_parse_failure("february")
        r0 = nil
      end

      node_cache[:calendar_february_en][start_index] = r0

      r0
    end

    module CalendarFebruaryEnAbbr0
    end

    module CalendarFebruaryEnAbbr1
      def index; 2; end
    end

    def _nt_calendar_february_en_abbr
      start_index = index
      if node_cache[:calendar_february_en_abbr].has_key?(index)
        cached = node_cache[:calendar_february_en_abbr][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?("feb", false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure("feb")
        r1 = nil
      end
      s0 << r1
      if r1
        r3 = _nt_abbreviated
        if r3
          r2 = r3
        else
          r2 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::RepeatingMonthNode,input, i0...index, s0)
        r0.extend(CalendarFebruaryEnAbbr0)
        r0.extend(CalendarFebruaryEnAbbr1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:calendar_february_en_abbr][start_index] = r0

      r0
    end

    def _nt_calendar_march
      start_index = index
      if node_cache[:calendar_march].has_key?(index)
        cached = node_cache[:calendar_march][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_calendar_march_en
      if r1
        r0 = r1
      else
        r2 = _nt_calendar_march_en_abbr
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:calendar_march][start_index] = r0

      r0
    end

    module CalendarMarchEn0
      def index; 3; end
    end

    def _nt_calendar_march_en
      start_index = index
      if node_cache[:calendar_march_en].has_key?(index)
        cached = node_cache[:calendar_march_en][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if has_terminal?("march", false, index)
        r0 = instantiate_node(Acute::Nodes::RepeatingMonthNode,input, index...(index + 5))
        r0.extend(CalendarMarchEn0)
        @index += 5
      else
        terminal_parse_failure("march")
        r0 = nil
      end

      node_cache[:calendar_march_en][start_index] = r0

      r0
    end

    module CalendarMarchEnAbbr0
    end

    module CalendarMarchEnAbbr1
      def index; 3; end
    end

    def _nt_calendar_march_en_abbr
      start_index = index
      if node_cache[:calendar_march_en_abbr].has_key?(index)
        cached = node_cache[:calendar_march_en_abbr][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?("mar", false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure("mar")
        r1 = nil
      end
      s0 << r1
      if r1
        r3 = _nt_abbreviated
        if r3
          r2 = r3
        else
          r2 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::RepeatingMonthNode,input, i0...index, s0)
        r0.extend(CalendarMarchEnAbbr0)
        r0.extend(CalendarMarchEnAbbr1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:calendar_march_en_abbr][start_index] = r0

      r0
    end

    def _nt_calendar_april
      start_index = index
      if node_cache[:calendar_april].has_key?(index)
        cached = node_cache[:calendar_april][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_calendar_april_en
      if r1
        r0 = r1
      else
        r2 = _nt_calendar_april_en_abbr
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:calendar_april][start_index] = r0

      r0
    end

    module CalendarAprilEn0
      def index; 4; end
    end

    def _nt_calendar_april_en
      start_index = index
      if node_cache[:calendar_april_en].has_key?(index)
        cached = node_cache[:calendar_april_en][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if has_terminal?("april", false, index)
        r0 = instantiate_node(Acute::Nodes::RepeatingMonthNode,input, index...(index + 5))
        r0.extend(CalendarAprilEn0)
        @index += 5
      else
        terminal_parse_failure("april")
        r0 = nil
      end

      node_cache[:calendar_april_en][start_index] = r0

      r0
    end

    module CalendarAprilEnAbbr0
    end

    module CalendarAprilEnAbbr1
      def index; 4; end
    end

    def _nt_calendar_april_en_abbr
      start_index = index
      if node_cache[:calendar_april_en_abbr].has_key?(index)
        cached = node_cache[:calendar_april_en_abbr][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?("apr", false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure("apr")
        r1 = nil
      end
      s0 << r1
      if r1
        r3 = _nt_abbreviated
        if r3
          r2 = r3
        else
          r2 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::RepeatingMonthNode,input, i0...index, s0)
        r0.extend(CalendarAprilEnAbbr0)
        r0.extend(CalendarAprilEnAbbr1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:calendar_april_en_abbr][start_index] = r0

      r0
    end

    module CalendarMay0
      def index; 5; end
    end

    def _nt_calendar_may
      start_index = index
      if node_cache[:calendar_may].has_key?(index)
        cached = node_cache[:calendar_may][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if has_terminal?("may", false, index)
        r0 = instantiate_node(Acute::Nodes::RepeatingMonthNode,input, index...(index + 3))
        r0.extend(CalendarMay0)
        @index += 3
      else
        terminal_parse_failure("may")
        r0 = nil
      end

      node_cache[:calendar_may][start_index] = r0

      r0
    end

    def _nt_calendar_june
      start_index = index
      if node_cache[:calendar_june].has_key?(index)
        cached = node_cache[:calendar_june][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_calendar_june_en
      if r1
        r0 = r1
      else
        r2 = _nt_calendar_june_en_abbr
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:calendar_june][start_index] = r0

      r0
    end

    module CalendarJuneEn0
      def index; 6; end
    end

    def _nt_calendar_june_en
      start_index = index
      if node_cache[:calendar_june_en].has_key?(index)
        cached = node_cache[:calendar_june_en][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if has_terminal?("june", false, index)
        r0 = instantiate_node(Acute::Nodes::RepeatingMonthNode,input, index...(index + 4))
        r0.extend(CalendarJuneEn0)
        @index += 4
      else
        terminal_parse_failure("june")
        r0 = nil
      end

      node_cache[:calendar_june_en][start_index] = r0

      r0
    end

    module CalendarJuneEnAbbr0
    end

    module CalendarJuneEnAbbr1
      def index; 6; end
    end

    def _nt_calendar_june_en_abbr
      start_index = index
      if node_cache[:calendar_june_en_abbr].has_key?(index)
        cached = node_cache[:calendar_june_en_abbr][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?("jun", false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure("jun")
        r1 = nil
      end
      s0 << r1
      if r1
        r3 = _nt_abbreviated
        if r3
          r2 = r3
        else
          r2 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::RepeatingMonthNode,input, i0...index, s0)
        r0.extend(CalendarJuneEnAbbr0)
        r0.extend(CalendarJuneEnAbbr1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:calendar_june_en_abbr][start_index] = r0

      r0
    end

    def _nt_calendar_july
      start_index = index
      if node_cache[:calendar_july].has_key?(index)
        cached = node_cache[:calendar_july][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_calendar_july_en
      if r1
        r0 = r1
      else
        r2 = _nt_calendar_july_en_abbr
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:calendar_july][start_index] = r0

      r0
    end

    module CalendarJulyEn0
      def index; 7; end
    end

    def _nt_calendar_july_en
      start_index = index
      if node_cache[:calendar_july_en].has_key?(index)
        cached = node_cache[:calendar_july_en][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if has_terminal?("july", false, index)
        r0 = instantiate_node(Acute::Nodes::RepeatingMonthNode,input, index...(index + 4))
        r0.extend(CalendarJulyEn0)
        @index += 4
      else
        terminal_parse_failure("july")
        r0 = nil
      end

      node_cache[:calendar_july_en][start_index] = r0

      r0
    end

    module CalendarJulyEnAbbr0
    end

    module CalendarJulyEnAbbr1
      def index; 7; end
    end

    def _nt_calendar_july_en_abbr
      start_index = index
      if node_cache[:calendar_july_en_abbr].has_key?(index)
        cached = node_cache[:calendar_july_en_abbr][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?("jul", false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure("jul")
        r1 = nil
      end
      s0 << r1
      if r1
        r3 = _nt_abbreviated
        if r3
          r2 = r3
        else
          r2 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::RepeatingMonthNode,input, i0...index, s0)
        r0.extend(CalendarJulyEnAbbr0)
        r0.extend(CalendarJulyEnAbbr1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:calendar_july_en_abbr][start_index] = r0

      r0
    end

    def _nt_calendar_august
      start_index = index
      if node_cache[:calendar_august].has_key?(index)
        cached = node_cache[:calendar_august][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_calendar_august_en
      if r1
        r0 = r1
      else
        r2 = _nt_calendar_august_en_abbr
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:calendar_august][start_index] = r0

      r0
    end

    module CalendarAugustEn0
      def index; 8; end
    end

    def _nt_calendar_august_en
      start_index = index
      if node_cache[:calendar_august_en].has_key?(index)
        cached = node_cache[:calendar_august_en][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if has_terminal?("august", false, index)
        r0 = instantiate_node(Acute::Nodes::RepeatingMonthNode,input, index...(index + 6))
        r0.extend(CalendarAugustEn0)
        @index += 6
      else
        terminal_parse_failure("august")
        r0 = nil
      end

      node_cache[:calendar_august_en][start_index] = r0

      r0
    end

    module CalendarAugustEnAbbr0
    end

    module CalendarAugustEnAbbr1
      def index; 8; end
    end

    def _nt_calendar_august_en_abbr
      start_index = index
      if node_cache[:calendar_august_en_abbr].has_key?(index)
        cached = node_cache[:calendar_august_en_abbr][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?("aug", false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure("aug")
        r1 = nil
      end
      s0 << r1
      if r1
        r3 = _nt_abbreviated
        if r3
          r2 = r3
        else
          r2 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::RepeatingMonthNode,input, i0...index, s0)
        r0.extend(CalendarAugustEnAbbr0)
        r0.extend(CalendarAugustEnAbbr1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:calendar_august_en_abbr][start_index] = r0

      r0
    end

    def _nt_calendar_september
      start_index = index
      if node_cache[:calendar_september].has_key?(index)
        cached = node_cache[:calendar_september][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_calendar_september_en
      if r1
        r0 = r1
      else
        r2 = _nt_calendar_september_en_abbr
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:calendar_september][start_index] = r0

      r0
    end

    module CalendarSeptemberEn0
      def index; 9; end
    end

    def _nt_calendar_september_en
      start_index = index
      if node_cache[:calendar_september_en].has_key?(index)
        cached = node_cache[:calendar_september_en][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if has_terminal?("september", false, index)
        r0 = instantiate_node(Acute::Nodes::RepeatingMonthNode,input, index...(index + 9))
        r0.extend(CalendarSeptemberEn0)
        @index += 9
      else
        terminal_parse_failure("september")
        r0 = nil
      end

      node_cache[:calendar_september_en][start_index] = r0

      r0
    end

    module CalendarSeptemberEnAbbr0
    end

    module CalendarSeptemberEnAbbr1
      def index; 9; end
    end

    def _nt_calendar_september_en_abbr
      start_index = index
      if node_cache[:calendar_september_en_abbr].has_key?(index)
        cached = node_cache[:calendar_september_en_abbr][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?("sep", false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure("sep")
        r1 = nil
      end
      s0 << r1
      if r1
        if has_terminal?("t", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("t")
          r3 = nil
        end
        if r3
          r2 = r3
        else
          r2 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r2
        if r2
          r5 = _nt_abbreviated
          if r5
            r4 = r5
          else
            r4 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r4
        end
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::RepeatingMonthNode,input, i0...index, s0)
        r0.extend(CalendarSeptemberEnAbbr0)
        r0.extend(CalendarSeptemberEnAbbr1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:calendar_september_en_abbr][start_index] = r0

      r0
    end

    def _nt_calendar_october
      start_index = index
      if node_cache[:calendar_october].has_key?(index)
        cached = node_cache[:calendar_october][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_calendar_october_en
      if r1
        r0 = r1
      else
        r2 = _nt_calendar_october_en_abbr
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:calendar_october][start_index] = r0

      r0
    end

    module CalendarOctoberEn0
      def index; 10; end
    end

    def _nt_calendar_october_en
      start_index = index
      if node_cache[:calendar_october_en].has_key?(index)
        cached = node_cache[:calendar_october_en][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if has_terminal?("october", false, index)
        r0 = instantiate_node(Acute::Nodes::RepeatingMonthNode,input, index...(index + 7))
        r0.extend(CalendarOctoberEn0)
        @index += 7
      else
        terminal_parse_failure("october")
        r0 = nil
      end

      node_cache[:calendar_october_en][start_index] = r0

      r0
    end

    module CalendarOctoberEnAbbr0
    end

    module CalendarOctoberEnAbbr1
      def index; 10; end
    end

    def _nt_calendar_october_en_abbr
      start_index = index
      if node_cache[:calendar_october_en_abbr].has_key?(index)
        cached = node_cache[:calendar_october_en_abbr][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?("oct", false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure("oct")
        r1 = nil
      end
      s0 << r1
      if r1
        r3 = _nt_abbreviated
        if r3
          r2 = r3
        else
          r2 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::RepeatingMonthNode,input, i0...index, s0)
        r0.extend(CalendarOctoberEnAbbr0)
        r0.extend(CalendarOctoberEnAbbr1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:calendar_october_en_abbr][start_index] = r0

      r0
    end

    def _nt_calendar_november
      start_index = index
      if node_cache[:calendar_november].has_key?(index)
        cached = node_cache[:calendar_november][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_calendar_november_en
      if r1
        r0 = r1
      else
        r2 = _nt_calendar_november_en_abbr
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:calendar_november][start_index] = r0

      r0
    end

    module CalendarNovemberEn0
      def index; 11; end
    end

    def _nt_calendar_november_en
      start_index = index
      if node_cache[:calendar_november_en].has_key?(index)
        cached = node_cache[:calendar_november_en][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if has_terminal?("november", false, index)
        r0 = instantiate_node(Acute::Nodes::RepeatingMonthNode,input, index...(index + 8))
        r0.extend(CalendarNovemberEn0)
        @index += 8
      else
        terminal_parse_failure("november")
        r0 = nil
      end

      node_cache[:calendar_november_en][start_index] = r0

      r0
    end

    module CalendarNovemberEnAbbr0
    end

    module CalendarNovemberEnAbbr1
      def index; 11; end
    end

    def _nt_calendar_november_en_abbr
      start_index = index
      if node_cache[:calendar_november_en_abbr].has_key?(index)
        cached = node_cache[:calendar_november_en_abbr][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?("nov", false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure("nov")
        r1 = nil
      end
      s0 << r1
      if r1
        r3 = _nt_abbreviated
        if r3
          r2 = r3
        else
          r2 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::RepeatingMonthNode,input, i0...index, s0)
        r0.extend(CalendarNovemberEnAbbr0)
        r0.extend(CalendarNovemberEnAbbr1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:calendar_november_en_abbr][start_index] = r0

      r0
    end

    def _nt_calendar_december
      start_index = index
      if node_cache[:calendar_december].has_key?(index)
        cached = node_cache[:calendar_december][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_calendar_december_en
      if r1
        r0 = r1
      else
        r2 = _nt_calendar_december_en_abbr
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:calendar_december][start_index] = r0

      r0
    end

    module CalendarDecemberEn0
      def index; 12; end
    end

    def _nt_calendar_december_en
      start_index = index
      if node_cache[:calendar_december_en].has_key?(index)
        cached = node_cache[:calendar_december_en][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if has_terminal?("december", false, index)
        r0 = instantiate_node(Acute::Nodes::RepeatingMonthNode,input, index...(index + 8))
        r0.extend(CalendarDecemberEn0)
        @index += 8
      else
        terminal_parse_failure("december")
        r0 = nil
      end

      node_cache[:calendar_december_en][start_index] = r0

      r0
    end

    module CalendarDecemberEnAbbr0
    end

    module CalendarDecemberEnAbbr1
      def index; 12; end
    end

    def _nt_calendar_december_en_abbr
      start_index = index
      if node_cache[:calendar_december_en_abbr].has_key?(index)
        cached = node_cache[:calendar_december_en_abbr][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?("dec", false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure("dec")
        r1 = nil
      end
      s0 << r1
      if r1
        r3 = _nt_abbreviated
        if r3
          r2 = r3
        else
          r2 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::RepeatingMonthNode,input, i0...index, s0)
        r0.extend(CalendarDecemberEnAbbr0)
        r0.extend(CalendarDecemberEnAbbr1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:calendar_december_en_abbr][start_index] = r0

      r0
    end

    def _nt_calendar_long_month
      start_index = index
      if node_cache[:calendar_long_month].has_key?(index)
        cached = node_cache[:calendar_long_month][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_calendar_january
      if r1
        r0 = r1
      else
        r2 = _nt_calendar_march
        if r2
          r0 = r2
        else
          r3 = _nt_calendar_may
          if r3
            r0 = r3
          else
            r4 = _nt_calendar_july
            if r4
              r0 = r4
            else
              r5 = _nt_calendar_august
              if r5
                r0 = r5
              else
                r6 = _nt_calendar_october
                if r6
                  r0 = r6
                else
                  r7 = _nt_calendar_december
                  if r7
                    r0 = r7
                  else
                    @index = i0
                    r0 = nil
                  end
                end
              end
            end
          end
        end
      end

      node_cache[:calendar_long_month][start_index] = r0

      r0
    end

    def _nt_calendar_short_month
      start_index = index
      if node_cache[:calendar_short_month].has_key?(index)
        cached = node_cache[:calendar_short_month][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_calendar_april
      if r1
        r0 = r1
      else
        r2 = _nt_calendar_june
        if r2
          r0 = r2
        else
          r3 = _nt_calendar_september
          if r3
            r0 = r3
          else
            r4 = _nt_calendar_november
            if r4
              r0 = r4
            else
              @index = i0
              r0 = nil
            end
          end
        end
      end

      node_cache[:calendar_short_month][start_index] = r0

      r0
    end

    module MonthYearSeparator0
      def optional_hspace1
        elements[0]
      end

      def optional_hspace2
        elements[2]
      end
    end

    def _nt_month_year_separator
      start_index = index
      if node_cache[:month_year_separator].has_key?(index)
        cached = node_cache[:month_year_separator][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      i1, s1 = index, []
      r2 = _nt_optional_hspace
      s1 << r2
      if r2
        if has_terminal?('\G[,-]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        s1 << r3
        if r3
          r4 = _nt_optional_hspace
          s1 << r4
        end
      end
      if s1.last
        r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
        r1.extend(MonthYearSeparator0)
      else
        @index = i1
        r1 = nil
      end
      if r1
        r0 = r1
      else
        r5 = _nt_required_hspace
        if r5
          r0 = r5
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:month_year_separator][start_index] = r0

      r0
    end

  end

  class MonthsParser < Treetop::Runtime::CompiledParser
    include Months
  end

end

