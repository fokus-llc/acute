# Autogenerated from a Treetop grammar. Edits may be lost.



module Acute::Rules
  module ClockTimes
    include Treetop::Runtime

    def root
      @root ||= :repeating_time
    end

    module RepeatingTime0
      def clock_time_node
        elements[0]
      end

      def optional_hspace
        elements[1]
      end

      def zone_node
        elements[2]
      end
    end

    def _nt_repeating_time
      start_index = index
      if node_cache[:repeating_time].has_key?(index)
        cached = node_cache[:repeating_time][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      i1 = index
      r2 = _nt_named_time
      if r2
        r1 = r2
      else
        r3 = _nt_clock_time_12
        if r3
          r1 = r3
        else
          r4 = _nt_clock_time_24
          if r4
            r1 = r4
          else
            @index = i1
            r1 = nil
          end
        end
      end
      s0 << r1
      if r1
        r5 = _nt_optional_hspace
        s0 << r5
        if r5
          r7 = _nt_time_zone
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r6
        end
      end
      if s0.last
        r0 = instantiate_node(Acute::Nodes::RepeatingTimeNode,input, i0...index, s0)
        r0.extend(RepeatingTime0)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:repeating_time][start_index] = r0

      r0
    end

    def _nt_named_time
      start_index = index
      if node_cache[:named_time].has_key?(index)
        cached = node_cache[:named_time][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_time_noon
      if r1
        r0 = r1
      else
        r2 = _nt_time_midnight
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:named_time][start_index] = r0

      r0
    end

    module TimeNoon0
      def value; "12:00:00"; end
    end

    def _nt_time_noon
      start_index = index
      if node_cache[:time_noon].has_key?(index)
        cached = node_cache[:time_noon][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if has_terminal?("noon", false, index)
        r0 = instantiate_node(SyntaxNode,input, index...(index + 4))
        r0.extend(TimeNoon0)
        @index += 4
      else
        terminal_parse_failure("noon")
        r0 = nil
      end

      node_cache[:time_noon][start_index] = r0

      r0
    end

    module TimeMidnight0
    end

    module TimeMidnight1
      def value; "00:00:00"; end
    end

    def _nt_time_midnight
      start_index = index
      if node_cache[:time_midnight].has_key?(index)
        cached = node_cache[:time_midnight][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?("mid", false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure("mid")
        r1 = nil
      end
      s0 << r1
      if r1
        if has_terminal?("-", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("-")
          r3 = nil
        end
        if r3
          r2 = r3
        else
          r2 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r2
        if r2
          if has_terminal?("night", false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 5))
            @index += 5
          else
            terminal_parse_failure("night")
            r4 = nil
          end
          s0 << r4
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(TimeMidnight0)
        r0.extend(TimeMidnight1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:time_midnight][start_index] = r0

      r0
    end

    module ClockTime120
      def hour
        elements[0]
      end

      def mins
        elements[2]
      end

      def secs
        elements[4]
      end

      def optional_hspace
        elements[5]
      end

      def clock_meridian
        elements[6]
      end
    end

    module ClockTime121
      def value
        meridian_offset = clock_meridian ? clock_meridian.offset_hours : 0
        if (hour_value = hour.value) == 12
          hour_value = (meridian_offset == 0) ? 0 : 12
        else
          hour_value += meridian_offset
        end

        "%02d:%02d:%02d" % [
          hour_value,
          mins.empty? ? 0 : mins.value,
          secs.empty? ? 0 : secs.value
        ]
      end
    end

    def _nt_clock_time_12
      start_index = index
      if node_cache[:clock_time_12].has_key?(index)
        cached = node_cache[:clock_time_12][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_clock_lte_12
      s0 << r1
      if r1
        if has_terminal?(":", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(":")
          r3 = nil
        end
        if r3
          r2 = r3
        else
          r2 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r2
        if r2
          r5 = _nt_clock_lt_sixty
          if r5
            r4 = r5
          else
            r4 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r4
          if r4
            if has_terminal?(":", false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(":")
              r7 = nil
            end
            if r7
              r6 = r7
            else
              r6 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r6
            if r6
              r9 = _nt_clock_lt_sixty
              if r9
                r8 = r9
              else
                r8 = instantiate_node(SyntaxNode,input, index...index)
              end
              s0 << r8
              if r8
                r10 = _nt_optional_hspace
                s0 << r10
                if r10
                  r11 = _nt_clock_meridian
                  s0 << r11
                end
              end
            end
          end
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(ClockTime120)
        r0.extend(ClockTime121)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:clock_time_12][start_index] = r0

      r0
    end

    module ClockTime240
      def hour
        elements[0]
      end

      def mins
        elements[2]
      end

      def secs
        elements[4]
      end
    end

    module ClockTime241
      def value
        "%02d:%02d:%02d" % [
          hour.value,
          mins.value,
          secs.empty? ? 0 : secs.value
        ]
      end
    end

    def _nt_clock_time_24
      start_index = index
      if node_cache[:clock_time_24].has_key?(index)
        cached = node_cache[:clock_time_24][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_clock_lt_24
      s0 << r1
      if r1
        if has_terminal?(":", false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(":")
          r2 = nil
        end
        s0 << r2
        if r2
          r3 = _nt_clock_lt_sixty
          s0 << r3
          if r3
            if has_terminal?(":", false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(":")
              r5 = nil
            end
            if r5
              r4 = r5
            else
              r4 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r4
            if r4
              r7 = _nt_clock_lt_sixty
              if r7
                r6 = r7
              else
                r6 = instantiate_node(SyntaxNode,input, index...index)
              end
              s0 << r6
            end
          end
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(ClockTime240)
        r0.extend(ClockTime241)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:clock_time_24][start_index] = r0

      r0
    end

    def _nt_clock_lt_24
      start_index = index
      if node_cache[:clock_lt_24].has_key?(index)
        cached = node_cache[:clock_lt_24][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_clock_20_to_23
      if r1
        r0 = r1
      else
        r2 = _nt_clock_10_to_19
        if r2
          r0 = r2
        else
          r3 = _nt_clock_1_to_9
          if r3
            r0 = r3
          else
            @index = i0
            r0 = nil
          end
        end
      end

      node_cache[:clock_lt_24][start_index] = r0

      r0
    end

    def _nt_clock_lte_12
      start_index = index
      if node_cache[:clock_lte_12].has_key?(index)
        cached = node_cache[:clock_lte_12][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_clock_10_to_12
      if r1
        r0 = r1
      else
        r2 = _nt_clock_1_to_9
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:clock_lte_12][start_index] = r0

      r0
    end

    module Clock1To90
    end

    module Clock1To91
      def value; text_value.to_i; end
    end

    def _nt_clock_1_to_9
      start_index = index
      if node_cache[:clock_1_to_9].has_key?(index)
        cached = node_cache[:clock_1_to_9][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('0', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('0')
        r2 = nil
      end
      if r2
        r1 = r2
      else
        r1 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r1
      if r1
        if has_terminal?('\G[1-9]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        s0 << r3
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Clock1To90)
        r0.extend(Clock1To91)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:clock_1_to_9][start_index] = r0

      r0
    end

    module Clock10To120
    end

    module Clock10To121
      def value; text_value.to_i; end
    end

    def _nt_clock_10_to_12
      start_index = index
      if node_cache[:clock_10_to_12].has_key?(index)
        cached = node_cache[:clock_10_to_12][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('1', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('1')
        r1 = nil
      end
      s0 << r1
      if r1
        if has_terminal?('\G[0-2]', true, index)
          r2 = true
          @index += 1
        else
          r2 = nil
        end
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Clock10To120)
        r0.extend(Clock10To121)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:clock_10_to_12][start_index] = r0

      r0
    end

    module Clock10To190
    end

    module Clock10To191
      def value; text_value.to_i; end
    end

    def _nt_clock_10_to_19
      start_index = index
      if node_cache[:clock_10_to_19].has_key?(index)
        cached = node_cache[:clock_10_to_19][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('1', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('1')
        r1 = nil
      end
      s0 << r1
      if r1
        if has_terminal?('\G[0-9]', true, index)
          r2 = true
          @index += 1
        else
          r2 = nil
        end
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Clock10To190)
        r0.extend(Clock10To191)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:clock_10_to_19][start_index] = r0

      r0
    end

    module Clock20To230
    end

    module Clock20To231
      def value; text_value.to_i; end
    end

    def _nt_clock_20_to_23
      start_index = index
      if node_cache[:clock_20_to_23].has_key?(index)
        cached = node_cache[:clock_20_to_23][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('2', false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('2')
        r1 = nil
      end
      s0 << r1
      if r1
        if has_terminal?('\G[0-3]', true, index)
          r2 = true
          @index += 1
        else
          r2 = nil
        end
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Clock20To230)
        r0.extend(Clock20To231)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:clock_20_to_23][start_index] = r0

      r0
    end

    module ClockLtSixty0
    end

    module ClockLtSixty1
      def value; text_value.to_i; end
    end

    def _nt_clock_lt_sixty
      start_index = index
      if node_cache[:clock_lt_sixty].has_key?(index)
        cached = node_cache[:clock_lt_sixty][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('\G[0-5]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      s0 << r1
      if r1
        if has_terminal?('\G[0-9]', true, index)
          r2 = true
          @index += 1
        else
          r2 = nil
        end
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(ClockLtSixty0)
        r0.extend(ClockLtSixty1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:clock_lt_sixty][start_index] = r0

      r0
    end

    def _nt_clock_meridian
      start_index = index
      if node_cache[:clock_meridian].has_key?(index)
        cached = node_cache[:clock_meridian][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_clock_am
      if r1
        r0 = r1
      else
        r2 = _nt_clock_pm
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:clock_meridian][start_index] = r0

      r0
    end

    module ClockAm0
      def optional_hspace
        elements[1]
      end

    end

    module ClockAm1
    end

    module ClockAm2
      def offset_hours; 0; end
    end

    def _nt_clock_am
      start_index = index
      if node_cache[:clock_am].has_key?(index)
        cached = node_cache[:clock_am][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?("a", false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("a")
        r1 = nil
      end
      s0 << r1
      if r1
        i3, s3 = index, []
        r5 = _nt_abbreviated
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          r6 = _nt_optional_hspace
          s3 << r6
          if r6
            if has_terminal?("m", false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("m")
              r7 = nil
            end
            s3 << r7
            if r7
              r9 = _nt_abbreviated
              if r9
                r8 = r9
              else
                r8 = instantiate_node(SyntaxNode,input, index...index)
              end
              s3 << r8
            end
          end
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(ClockAm0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          r2 = r3
        else
          r2 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(ClockAm1)
        r0.extend(ClockAm2)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:clock_am][start_index] = r0

      r0
    end

    module ClockPm0
      def optional_hspace
        elements[1]
      end

    end

    module ClockPm1
    end

    module ClockPm2
      def offset_hours; 12; end
    end

    def _nt_clock_pm
      start_index = index
      if node_cache[:clock_pm].has_key?(index)
        cached = node_cache[:clock_pm][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?("p", false, index)
        r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("p")
        r1 = nil
      end
      s0 << r1
      if r1
        i3, s3 = index, []
        r5 = _nt_abbreviated
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          r6 = _nt_optional_hspace
          s3 << r6
          if r6
            if has_terminal?("m", false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("m")
              r7 = nil
            end
            s3 << r7
            if r7
              r9 = _nt_abbreviated
              if r9
                r8 = r9
              else
                r8 = instantiate_node(SyntaxNode,input, index...index)
              end
              s3 << r8
            end
          end
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(ClockPm0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          r2 = r3
        else
          r2 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(ClockPm1)
        r0.extend(ClockPm2)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:clock_pm][start_index] = r0

      r0
    end

  end

  class ClockTimesParser < Treetop::Runtime::CompiledParser
    include ClockTimes
  end

end

